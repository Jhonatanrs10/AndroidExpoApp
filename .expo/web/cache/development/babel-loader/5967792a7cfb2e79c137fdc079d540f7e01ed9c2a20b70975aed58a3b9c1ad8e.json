{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExpoSystemUI from \"./ExpoSystemUI\";\nexport function setBackgroundColorAsync(_x) {\n  return _setBackgroundColorAsync.apply(this, arguments);\n}\nfunction _setBackgroundColorAsync() {\n  _setBackgroundColorAsync = _asyncToGenerator(function* (color) {\n    if (color == null) {\n      return yield ExpoSystemUI.setBackgroundColorAsync(null);\n    } else {\n      var colorNumber = Platform.OS === 'web' ? color : processColor(color);\n      return yield ExpoSystemUI.setBackgroundColorAsync(colorNumber);\n    }\n  });\n  return _setBackgroundColorAsync.apply(this, arguments);\n}\nexport function getBackgroundColorAsync() {\n  return _getBackgroundColorAsync.apply(this, arguments);\n}\nfunction _getBackgroundColorAsync() {\n  _getBackgroundColorAsync = _asyncToGenerator(function* () {\n    return yield ExpoSystemUI.getBackgroundColorAsync();\n  });\n  return _getBackgroundColorAsync.apply(this, arguments);\n}","map":{"version":3,"names":["ExpoSystemUI","setBackgroundColorAsync","_x","_setBackgroundColorAsync","apply","arguments","_asyncToGenerator","color","colorNumber","Platform","OS","processColor","getBackgroundColorAsync","_getBackgroundColorAsync"],"sources":["/home/jhonatanrs/Documents/GitHub/ExpoJhonatanrs/node_modules/expo-system-ui/src/SystemUI.ts"],"sourcesContent":["import { ColorValue, Platform, processColor } from 'react-native';\n\nimport ExpoSystemUI from './ExpoSystemUI';\n\n/**\n * Changes the root view background color.\n * Call this function in the root file outside of you component.\n *\n * @example\n * ```ts\n * SystemUI.setBackgroundColorAsync(\"black\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBackgroundColorAsync(color: ColorValue | null): Promise<void> {\n  if (color == null) {\n    return await ExpoSystemUI.setBackgroundColorAsync(null);\n  } else {\n    const colorNumber = Platform.OS === 'web' ? color : processColor(color);\n    return await ExpoSystemUI.setBackgroundColorAsync(colorNumber);\n  }\n}\n\n/**\n * Gets the root view background color.\n *\n * @example\n * ```ts\n * const color = await SystemUI.getBackgroundColorAsync();\n * ```\n * @returns Current root view background color in hex format. Returns `null` if the background color is not set.\n */\nexport async function getBackgroundColorAsync(): Promise<ColorValue | null> {\n  return await ExpoSystemUI.getBackgroundColorAsync();\n}\n"],"mappings":";;;AAEA,OAAOA,YAAY;AAYnB,gBAAsBC,uBAAuBA,CAAAC,EAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAO5C,SAAAF,yBAAA;EAAAA,wBAAA,GAAAG,iBAAA,CAPM,WAAuCC,KAAwB;IACpE,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,aAAaP,YAAY,CAACC,uBAAuB,CAAC,IAAI,CAAC;KACxD,MAAM;MACL,IAAMO,WAAW,GAAGC,QAAQ,CAACC,EAAE,KAAK,KAAK,GAAGH,KAAK,GAAGI,YAAY,CAACJ,KAAK,CAAC;MACvE,aAAaP,YAAY,CAACC,uBAAuB,CAACO,WAAW,CAAC;;EAElE,CAAC;EAAA,OAAAL,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAWD,gBAAsBO,uBAAuBA,CAAA;EAAA,OAAAC,wBAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA;AAE5C,SAAAQ,yBAAA;EAAAA,wBAAA,GAAAP,iBAAA,CAFM,aAAsC;IAC3C,aAAaN,YAAY,CAACY,uBAAuB,EAAE;EACrD,CAAC;EAAA,OAAAC,wBAAA,CAAAT,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}